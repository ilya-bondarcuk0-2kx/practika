#pragma once
#include"User.h"
#include<fstream>
#include<iostream>
#include<vector>


class Chat
{
public:


	Chat();




	void setUp();

	void printRecipients(User &user);

	std::string makeChat(User& user,std::string& login);

	void sendMessage(User& user,const std::string& msg);

	bool sendMessage(User& user,const std::string& path, const std::string& msg);

	bool SignIn(User& user);



	bool SignUp(User& user);


	bool PrintChat();
	bool PrintChat(const std::string& path);


private:

	
	std::vector<std::string> uLogins;
	std::vector<User> users;
	std::ifstream reader;
	std::ofstream writer;

};

/*

АХТУНГ - неоптимизировнный код :(

Класс Chat

1. В буквальном смылсле является операционной системой приложения, но обо всем по порядку.



2. Коструктор устанавливает только один поток ofstream в режим работы с исключениями (реализация в cpp файле), второй поток ifstream , 

в режиме с исключениями выдавал неприятные исключения,некоторые из которых сам способен обработать, если не ставить соответсвтующие флажки.



3. Метод setUp() - в нем происходит выгрузка уже зарегестрированных пользователей. Система такова - сначала поток берет файл с логинами

и записывает в вектор uLogins(сокращено от userLogins),

а далее с помощью конкатенации строк, поток выбирает файл каждого пользователя, и записывает в вектор users. Предусмотрен момент с тем,

что поток может выбрать пустую строку по окончанию цикла, потому после цикла, вызывается метод pop_back() что почистить ненужный элемент.


4. printRecipients() -  данный метод выводит вспомогательную информацию пользователю, о людях, с которыми он может общатсья в приватном чате.

5. makeChat() - один из интереснейших методов. Делает чат, с уникальным номером, умножая поля id пользователей, за счёт чего,

можно общаться в одном файле, не боясь о том, что файлы продублируются и о прочих неприятностях! 


!!! К слову, поток ofstream - очень универсальная вещь. Если файлик с каким-либо именем есть - просто открывает его, нет - создает!!!



6. sendMessage() - перегруженный метод. В одной реализации - просто отправляет сообщение в общий (главный чат), в другой, работает с путем,

который ему возвращает , например, метод makeChat();


7. Методы singIn() и signUp() - названия говорят сами за себя! Один авторизирует, проверяя на то, есть ли такой пользователь,

второй - регистрирует пользователя, но , только если такого уже нет в своеобразной базе данных


8. Метод printChat() - косвенно повторяет реализацию метода makeChat(). Перегружен. Первая реализация распечатывает главный чат, 

другая - чат с конкретным пользователем

9. Четыре поля - два вектора (те самые динамические массивы на стероидах :) ), назначение которых уже известно.

И два потока , ifstream - с именем reader и ofstream - writer. Служат для взаимодействия с файлами, 

записи и чтения из файлов, создания файлов



*/