1. Список участников команды:
	1. Бондарчук Илья
	2. Нухов Адам
	3. Молчанов Вячеслав

2. Тимлид:
	Тилидом был выбран Бондарчук Илья.

3. Распределение задач:

	Илья -> написание основной логики приложения, в основном был занят именно классами контролерами, т.е. Chat, Application. Так же реализовали вместе с
 

	Вячеславом метод makeChat(), о котором будет сказано ниже.

	Вячеслав -> написание класса-подарка NewYearPresent - описал шаблон-класс. На пару с Ильей написали алгоритм вывода елки из символов.

	Адам -> оформление UI. В классе Application описал вспомгательные надписи, вообщем вводы-выводы там, где они нужны. После Илья добавил

	нужный функционал, условия и так далее.
	
	

4. Описание выбранной идеи решения:
	Проект построен на библиотеке "fstream", позволяющей работать с файлами, а именно: создавать, редактировать и передавать файлы.
	Так же для изменения кодировки консоли, для ее корректной работы с кириллицой, на всякий случай, был подключен файл "Windows.h"
	
	Почему именно fstream? Дело в том, что данная библиотека: а) Идет в пакете стандартного C++, б) Позволяет удобно работать с файлами, 
	в) Достаточно оптимизирована и оттестированна, чтобы пользователям было удобно.

	Это все причины почему проект строиться на данной механике. Конечно же есть и свои алгоритмы, классы и прочее.

	Насчет реализации -  это локальный чат, распологаюзийся на одной машине (ПК). Диалоги можно вести таким образом. Один пользователь зашел - написал, дал место другому и так далее.

5. Схема архитектуры проекта:

	К сожалению проект лишен такого механизма, как наследование. Тем не менее, архитектура классов выглядит так.


	[1.Application] - содержит в себе объекты типа User, Chat. Посредник своего рода.
	[2.Chat] - класс операционная система. Отсюда идут все нужные для работы алгоритмы.
	[3.User] - класс, в котором описана сущность пользователя.
	[4.NewYearPresent] - данный класс имеет временное использование, потому используется как временная переменная в классе Application.

6. Описание пользовательских типов и функций в проекте:

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
       [Класс Application]
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	1. Конструктор выделяет в куче (динамической памяти) два поля (о них поговорим позже) 
	и деструктор (функция с тильдой в начале - ~Application()) - чистит динамическую память во время уничтожения объекта.


	2. Метод Run() - приводит программу в исполнение. В нем сосредоточен весь User Interface. Запуск операций ведется через данный класс,

	однако чего то такого кроме вызовов функций он не делает, своего рода посредник между пользователем и API (Application Programming Interface)

	3. Метод Chatting() - в него вынесены повторяющиеся инструкции, которые вызваются в различных кейсах switch()


	4. Четыре поля - два указателя, для облегчения веса приложения, и два булевых флажка isRun и  isChatActive , которые служат остановкой для цикла

	while()

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	[Класс Chat]
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

	1. В буквальном смылсле является операционной системой приложения, но обо всем по порядку.



	2. Коструктор устанавливает только один поток ofstream в режим работы с исключениями (реализация в cpp файле), второй поток ifstream , 

	в режиме с исключениями выдавал неприятные исключения,некоторые из которых сам способен обработать, если не ставить соответсвтующие флажки.



	3. Метод setUp() - в нем происходит выгрузка уже зарегестрированных пользователей. Система такова - сначала поток берет файл с логинами

	и записывает в вектор uLogins(сокращено от userLogins),

	а далее с помощью конкатенации строк, поток выбирает файл каждого пользователя, и записывает в вектор users. Предусмотрен момент с тем,

	что поток может выбрать пустую строку по окончанию цикла, потому после цикла, вызывается метод pop_back() что почистить ненужный элемент.


	4. printRecipients() -  данный метод выводит вспомогательную информацию пользователю, о людях, с которыми он может общатсья в приватном чате.

	5. makeChat() - один из интереснейших методов. Делает чат, с уникальным номером, умножая поля id пользователей, за счёт чего,

	можно общаться в одном файле, не боясь о том, что файлы продублируются и о прочих неприятностях! 


!!! К слову, поток ofstream - очень универсальная вещь. Если файлик с каким-либо именем есть - просто открывает его, нет - создает!!!



	6. sendMessage() - перегруженный метод. В одной реализации - просто отправляет сообщение в общий (главный чат), в другой, работает с путем,

	который ему возвращает , например, метод makeChat();


	7. Методы singIn() и signUp() - названия говорят сами за себя! Один авторизирует, проверяя на то, есть ли такой пользователь + при успешной авторизации дает пользователю его сохраненное имя и id,

	второй - регистрирует пользователя, но , только если такого уже нет в своеобразной базе данных.


	8. Метод printChat() - косвенно повторяет реализацию метода makeChat(). Перегружен. Первая реализация распечатывает главный чат, 

	другая - чат с конкретным пользователем

	9. Четыре поля - два вектора (те самые динамические массивы на стероидах :) ), назначение которых уже известно.

	И два потока , ifstream - с именем reader и ofstream - writer. Служат для взаимодействия с файлами, 

	записи и чтения из файлов, создания файлов

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	[Класс User]
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

	1. Конструктор, методы get и set, позволющие обращатсья к инкапсулированным полям.

	2. Перегруженные операторы ввода-вывода, которые будут нужны для взаимодействия с потоками.

	3. Четыре приватных поля : login, password, name - типа std::string, и поле id - беззнаковый расширенный int(данное поле потребуется после...)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	[Класс NewYearPresent] - подарочки к наступающему)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

	1. Сам по себе класс - шаблон.

	2. Есть спеализация затычка, чтобы не пихали строки в него, а иначе выйдет не красиво.

	3. Шаблонный метод Draw() - принимает параметром pixel шаблонного типа, 

	и рапспечатывает ёлочку, высотой не больше 20 пикселей, а иначе будет непонятно что
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

	

Old-aged Development Studio.
